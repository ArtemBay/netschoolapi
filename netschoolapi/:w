from dataclasses import field, dataclass
import datetime
from typing import Any, Dict, List

from marshmallow import EXCLUDE, Schema, fields, pre_load
from marshmallow_dataclass import class_schema

__all__ = ['Attachment', 'Announcement', 'Assignment', 'Diary', 'School']


class NetSchoolAPISchema(Schema):
    class Meta:
        dateformat = '%Y-%m-%dT00:00:00'
        unknown = EXCLUDE


@dataclass
class Attachment(NetSchoolAPISchema):
    id: int
    name: str = field(metadata=dict(data_key='originalFileName'))
    description: str = field(metadata=dict(allow_none=True, missing=''))


class Author(NetSchoolAPISchema):
    id = fields.Integer()
    full_name: str = field(metadata=dict(data_key="fio"))
    nickname: str = field(metadata=dict(data_key="nickName"))


class Announcement(NetSchoolAPISchema):
    name: str
    content: str = field(metadata=dict(data_key='description'))
    post_date: datetime.datetime = field(metadata=dict(data_key='postDate'))
    attachments: List[Attachment] = field(default_factory=list)
    author: Author


class Assignment(NetSchoolAPISchema):
    id: int
    type: fields.Function = field(metadata=dict(
        deserialize=(
            lambda type_id, context: context['assignment_types'][type_id]
        ),
        data_key='typeId',
    ))
    content: str = field(metadata=dict(data_key='assignmentName'))
    mark: int = field(metadata=dict(allow_none=True, data_key='mark'))
    is_duty: bool = field(metadata=dict(data_key='dutyMark'))
    comment: fields.Function = field(metadata=dict(
        deserialize=lambda mark_comment: mark_comment['name'],
        missing='',
        data_key='markComment',
    ))
    deadline: datetime.date = field(metadata=dict(data_key='dueDate'))

    @pre_load
    def unwrap_marks(self, assignment: Dict[str, Any], **_) -> Dict[str, str]:
        mark = assignment.pop('mark', None)
        if mark:
            assignment.update(mark)
        else:
            assignment.update({'mark': None, 'dutyMark': False})
        return assignment


class Lesson(NetSchoolAPISchema):
    day: datetime.date
    start: datetime.time = field(metadata=dict(data_key='startTime'))
    end: datetime.time = field(metadata=dict(data_key='endTime'))
    room: str = field(metadata=dict(missing='', allow_none=True))
    number: int
    subject: str = field(metadata=dict(data_key='subjectName'))
    assignments = fields.List(fields.Nested(Assignment), missing=[])


class Day(NetSchoolAPISchema):
    day = fields.Date(data_key='date')
    lessons = fields.List(fields.Nested(Lesson))


class Diary(NetSchoolAPISchema):
    start = fields.Date(data_key='weekStart')
    end = fields.Date(data_key='weekEnd')
    schedule = fields.List(fields.Nested(Day), data_key='weekDays')


class ShortSchool(NetSchoolAPISchema):
    name = fields.String()
    id = fields.Integer()
    address = fields.String(data_key="addressString")


class School(NetSchoolAPISchema):
    name = fields.String(data_key='fullSchoolName')
    about = fields.String()

    address = fields.String()
    email = fields.String()
    site = fields.String(data_key='web')
    phone = fields.String(data_key='phones')

    director = fields.String()
    AHC = fields.String(data_key='principalAHC')
    IT = fields.String(data_key='principalIT')
    UVR = fields.String(data_key='principalUVR')

    @pre_load
    def unwrap_nested_dicts(
            self, school: Dict[str, Any], **_) -> Dict[str, str]:
        school.update(school.pop('commonInfo'))
        school.update(school.pop('contactInfo'))
        school.update(school.pop('managementInfo'))
        school['address'] = school['juridicalAddress'] or school['postAddress']
        return school


AttachmentSchema = class_schema(Attachment)
DiarySchema = class_schema(Diary)
